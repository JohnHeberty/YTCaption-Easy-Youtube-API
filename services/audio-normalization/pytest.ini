"""
Configuração do pytest
"""

[tool.pytest.ini_options]
# Configuração básica
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Marcadores
markers = [
    "unit: Testes unitários",
    "integration: Testes de integração",
    "performance: Testes de performance",
    "load: Testes de carga",
    "stress: Testes de stress",
    "chaos: Testes de chaos engineering",
    "recovery: Testes de recuperação",
    "edge_case: Testes de casos extremos",
    "slow: Testes que demoram mais de 5 segundos"
]

# Configurações de execução
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--showlocals",
    "--tb=long"
]

# Configurações de timeout
timeout = 300
timeout_method = "thread"

# Filtros de warning
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
    "ignore:.*unclosed.*:ResourceWarning"
]

# Configurações assíncronas
asyncio_mode = "auto"

# Cobertura de código (se pytest-cov estiver instalado)
# addopts = [
#     "--cov=app",
#     "--cov-report=html",
#     "--cov-report=term-missing",
#     "--cov-branch"
# ]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod"
]