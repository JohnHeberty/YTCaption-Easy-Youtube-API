# Base com CUDA 12.1 + cuDNN p/ Ubuntu 22.04
FROM nvidia/cuda:12.1.0-cudnn8-runtime-ubuntu22.04

# Evita prompts (tzdata) e define fuso
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

# Python 3.11 (via deadsnakes) + pip para o 3.11
RUN apt-get update && apt-get install -y --no-install-recommends \
      ca-certificates curl wget git \
      software-properties-common \
   && add-apt-repository ppa:deadsnakes/ppa -y \
   && apt-get update && apt-get install -y --no-install-recommends \
      python3.11 python3.11-dev python3.11-distutils python3.11-venv \
   && curl -sS https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py \
   && python3.11 /tmp/get-pip.py \
   && ln -sf /usr/bin/python3.11 /usr/bin/python \
   && ln -sf /usr/bin/python3.11 /usr/bin/python3 \
   && rm -f /tmp/get-pip.py \
   && rm -rf /var/lib/apt/lists/*

# Metadata
LABEL maintainer="audio-normalization-service" \
      version="2.0.0" \
      description="Audio Normalization Microservice with CUDA Support"

# Ambiente
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility \
    CUDA_VISIBLE_DEVICES=0 \
    FORCE_CUDA=1

# Dependências de sistema para áudio
RUN apt-get update && apt-get install -y --no-install-recommends \
      ffmpeg libsndfile1 \
   && rm -rf /var/lib/apt/lists/* \
   && apt-get clean

WORKDIR /app

# Copia requirements antes p/ cache de layers
COPY requirements.txt .
COPY constraints.txt .

# PyTorch cu121 + deps Python (respeitando constraints)
RUN python -m pip install --no-cache-dir --upgrade pip \
 && python -m pip install --no-cache-dir \
      torch==2.1.2 torchaudio==2.1.2 \
      --index-url https://download.pytorch.org/whl/cu121 \
      -c constraints.txt \
 && python -m pip install --no-cache-dir -r requirements.txt -c constraints.txt

# Copia código
COPY app/ ./app/
COPY run.py .

# Usuário não-root
RUN useradd -m -u 1000 appuser

# Diretórios e permissões
RUN mkdir -p /app/uploads /app/processed /app/temp /app/logs \
 && chown -R appuser:appuser /app \
 && chmod -R 755 /app \
 && chmod -R 777 /app/uploads /app/processed /app/temp /app/logs

USER appuser

EXPOSE 8001

# Healthcheck (usa o curl da base)
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8001/health || exit 1

CMD ["python", "run.py"]
